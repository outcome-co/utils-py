name: Cache

on:
  push:
    branches:
      - master

env:
  # These environment variables are automatically recognized by poetry and pip
  # They allow us to specifically control where the cache is kept, so we can use 
  # the actions/cache@v2 action to store downloaded dependencies between multiple runs
  POETRY_CACHE_DIR: .cache/poetry
  PIP_CACHE_DIR: .cache/pip

jobs:
  cache:
    name: 'Update Cache'
    runs-on: ubuntu-latest
    # This avoids the workflow triggering itself when the version changes are pushed
    if: "!startsWith(github.event.head_commit.message, 'chore')"

    steps:
      - name: Check out code
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Get python version
        uses: outcome-co/action-read-toml@v2.0.9
        id: python_version
        with:
          path: pyproject.toml
          key: tool.poetry.dependencies.python

      - name: Set up python ${{ steps.python_version.outputs.tool_poetry_dependencies_python }}
        uses: actions/setup-python@v2.2.1
        with:
          python-version: ${{ steps.python_version.outputs.tool_poetry_dependencies_python }}

      - name: Configure pip cache
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          # Pip is only used to install poetry, and the poetry version 
          # is stored in pyproject.toml
          key: pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            pip

      - name: Configure poetry cache
        uses: actions/cache@v2
        with:
          path: ${{ env.POETRY_CACHE_DIR }}
          # All of the dependencies are stored in pyproject.toml
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry

      - name: Install dependencies
        run: make ci-setup
