name: Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

env:
  # These environment variables are automatically recognized by poetry and pip
  # They allow us to specifically control where the cache is kept, so we can use 
  # the actions/cache@v2 action to store downloaded dependencies between multiple runs
  POETRY_CACHE_DIR: .cache/poetry
  PIP_CACHE_DIR: .cache/pip

jobs:

    commit_lint:
      name: Lint commit messages
      runs-on: ubuntu-latest
      env:
        GITHUB_TOKEN: ${{ secrets.OTTO_TOKEN }}

      steps:
        - name: Check out code
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
        - name: Lint commit messages
          uses: wagoid/commitlint-github-action@v1
          with:
            failOnWarnings: true

    checks_and_tests:
      name: Run checks and tests
      runs-on: ubuntu-latest

      steps:
        - name: Check out code
          uses: actions/checkout@v2

        - name: Get python version
          uses: outcome-co/action-read-toml@master
          id: python_version
          with:
            path: pyproject.toml
            key: tool.poetry.dependencies.python

        - name: Check TODOs
          uses: outcome-co/action-check-todos@master
          with:
            pattern: "**/*"

        - name: Set up python ${{ steps.python_version.outputs.tool_poetry_dependencies_python }}
          uses: actions/setup-python@v2.0.1
          with:
            python-version: ${{ steps.python_version.outputs.tool_poetry_dependencies_python }}

        - name: Configure pip cache
          uses: actions/cache@v2
          with:
            path: ${{ env.PIP_CACHE_DIR }}
            # Pip is only used to install poetry, and the poetry version 
            # is stored in pyproject.toml
            key: pip-${{ hashFiles('**/pyproject.toml') }}

        - name: Configure poetry cache
          uses: actions/cache@v2
          with:
            path: ${{ env.POETRY_CACHE_DIR }}
            # All of the dependencies are stored in pyproject.toml
            key: poetry-${{ hashFiles('**/pyproject.toml') }}

        - name: Install dependencies
          run: make ci-setup

        - name: Run checks
          run: make check
        
        - name: Run tests
          run: make test

    auto_merge_dependabot:
        name: Auto-approve dependabot pull requests
        runs-on: ubuntu-latest
        needs: [checks_and_tests]

        if: github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]'

        steps:
          - name: Auto-approve
            uses: hmarr/auto-approve-action@v2.0.0
            with:
              github-token: ${{ secrets.OTTO_TOKEN }}

          - name: Auto-merge
            uses: "pascalgn/automerge-action@v0.8.4"
            env:
              GITHUB_TOKEN: "${{ secrets.OTTO_TOKEN }}"
              MERGE_LABELS: ""
              MERGE_METHOD: squash
